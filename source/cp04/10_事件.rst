10 事件
=======

10.1 EventTarget 接口
---------------------

事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM
支持大量的事件，本章开始介绍 DOM 的事件编程。

概述
~~~~

DOM
的事件操作（监听和触发），都定义在EventTarget接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，XMLHttpRequest、AudioNode、AudioContext）也部署了这个接口。

该接口主要提供三个实例方法。

-  addEventListener：绑定事件的监听函数
-  removeEventListener：移除事件的监听函数
-  dispatchEvent：触发事件

EventTarget.addEventListener()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

EventTarget.addEventListener()用于在当前节点或对象上，定义一个特定事件的监听函数。一旦这个事件发生，就会执行监听函数。该方法没有返回值。

该方法接受三个参数。

-  type：事件名称，大小写敏感。
-  listener：监听函数。事件发生时，会调用该监听函数。
-  useCapture：布尔值，表示监听函数是否在捕获阶段（capture）触发，默认为false（监听函数只在冒泡阶段被触发）。该参数可选。

下面是一个例子：

.. code:: js

   function hello() {
     console.log('Hello world');
   }

   var button = document.getElementById('btn');
   button.addEventListener('click', hello, false);

两个需要注意的地方：

-  第二个参数除了监听函数，还可以是一个具有handleEvent方法的对象。

.. code:: js

   buttonElement.addEventListener('click', {
     handleEvent: function (event) {
       console.log('click');
     }
   });

-  第三个参数除了布尔值useCapture，还可以是一个属性配置对象。该对象有以下属性。

   -  capture：布尔值，表示该事件是否在捕获阶段触发监听函数。
   -  once：布尔值，表示监听函数是否只触发一次，然后就自动移除。
   -  passive：布尔值，表示监听函数不会调用事件的preventDefault方法。如果监听函数调用了，浏览器将忽略这个要求，并在监控台输出一行警告。

.. code:: js

   element.addEventListener('click', function (event) {
     // 只执行一次的代码
   }, {once: true});

addEventListener方法可以为针对当前对象的同一个事件，添加多个不同的监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，该函数只会执行一次，多余的添加将自动被去除（不必使用removeEventListener方法手动去除）。

执行下面代码，点击文档只会输出一行Hello world。

.. code:: js

   function hello() {
     console.log('Hello world');
   }

   document.addEventListener('click', hello, false);
   document.addEventListener('click', hello, false);

如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数。

.. code:: js

   function print(x) {
     console.log(x);
   }

   var el = document.getElementById('div1');
   el.addEventListener('click', function () { print('Hello'); }, false);

监听函数内部的this，指向当前事件所在的那个对象。

.. code:: js

   // HTML 代码如下
   // <p id="para">Hello</p>
   var para = document.getElementById('para');
   para.addEventListener('click', function (e) {
     console.log(this.nodeName); // "P"
   }, false);

EventTarget.removeEventListener()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

removeEventListener方法移除的监听函数，必须是addEventListener方法添加的那个监听函数，而且必须在同一个元素节点，否则无效。

下面代码中，removeEventListener方法无效，因为监听函数不是同一个匿名函数。

.. code:: js

   div.addEventListener('click', function (e) {}, false);
   div.removeEventListener('click', function (e) {}, false);

上面代码中，removeEventListener方法也是无效的，因为第三个参数不一样。

.. code:: js

   element.addEventListener('mousedown', handleMouseDown, true);
   element.removeEventListener("mousedown", handleMouseDown, false);

EventTarget.dispatchEvent()
~~~~~~~~~~~~~~~~~~~~~~~~~~~

在当前节点上触发指定事件，从而触发监听函数的执行。

参数是一个Event对象的实例。下面代码在当前节点触发了click事件。

.. code:: js

   para.addEventListener('click', hello, false);
   var event = new Event('click');
   para.dispatchEvent(event);

该方法返回一个布尔值，只要有一个监听函数调用了Event.preventDefault()，返回值为false，否则为true。下面代码根据dispatchEvent方法的返回值，判断事件是否被取消了。

.. code:: js

   var canceled = !cb.dispatchEvent(event);
   if (canceled) {
     console.log('事件取消');
   } else {
     console.log('事件未取消');
   }

10.2 事件模型
-------------

1 监听函数
~~~~~~~~~~

js有三种方法为事件绑定监听函数

-  HTML 的 on- 属性（冒泡阶段触发）
-  元素节点的事件属性（冒泡阶段触发）
-  EventTarget.addEventListener()（默认在冒泡阶段触发，可以指定在捕获阶段也触发）

HTML 的 on- 属性
''''''''''''''''

这些属性的值是将会执行的代码，而不是一个函数。

.. code:: js

   <!-- 正确 -->
   <body onload="doSomething()">

   <!-- 错误 -->
   <body onload="doSomething">

使用这个方法指定的监听代码，只会在冒泡阶段触发。由于on-属性的监听代码，只在冒泡阶段触发，所以点击结果是先输出1，再输出2，即事件从子元素开始冒泡到父元素。

.. code:: js

   <div onClick="console.log(2)">
     <button onClick="console.log(1)">点击</button>
   </div>

与通过元素节点的setAttribute方法设置on-属性，效果是一样的。

.. code:: js

   el.setAttribute('onclick', 'doSomething()');
   // 等同于
   // <Element onclick="doSomething()">

元素节点的事件属性
''''''''''''''''''

这样指定的监听函数只会在冒泡阶段触发。

.. code:: js

   window.onload = doSomething;

   div.onclick = function (event) {
     console.log('触发事件');
   };

.. _eventtarget.addeventlistener-1:

EventTarget.addEventListener()
''''''''''''''''''''''''''''''

所有 DOM
节点实例都有addEventListener方法，用来为该节点定义事件的监听函数。

第一种“HTML 的 on- 属性”，违反了 HTML 与 JavaScript
代码相分离的原则，将两者写在一起，不利于代码分工，因此不推荐使用。

第二种“元素节点的事件属性”的缺点在于，同一个事件只能定义一个监听函数，也就是说，如果定义两次onclick属性，后一次定义会覆盖前一次。因此，也不推荐使用。

第三种EventTarget.addEventListener是推荐的指定监听函数的方法。它有如下优点：

-  同一个事件可以添加多个监听函数。
-  能够指定在哪个阶段（捕获阶段还是冒泡阶段）触发监听函数。
-  除了 DOM
   节点，其他对象（比如window、XMLHttpRequest等）也有这个接口，它等于是整个
   JavaScript 统一的监听函数接口。

2 this的指向
~~~~~~~~~~~~

监听函数内部的this指向触发事件的那个元素节点。执行下面代码，点击后会输出btn。其他两种监听函数的写法，this的指向也是如此。

.. code:: js

   <button id="btn" onclick="console.log(this.id)">点击</button>

3 事件的传播
~~~~~~~~~~~~

一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。

-  第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture
   phase）。
-  第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。
-  第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling
   phase）。

事件传播的最上层对象是window，接着依次是document，html（document.documentElement）和body（document.body）。

4 事件的代理
~~~~~~~~~~~~

由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。

下面click事件的监听函数定义在\ ``<ul>``\ 节点，但是实际上，它处理的是子节点\ ``<li>``\ 的click事件。这样只要定义一个监听函数，就能处理多个子节点的事件，而不用在每个\ ``<li>``\ 节点上定义监听函数。

.. code:: js

   var ul = document.querySelector('ul');

   ul.addEventListener('click', function (event) {
     if (event.target.tagName.toLowerCase() === 'li') {
       // some code
     }
   });

如果希望事件到某个节点为止，不再传播，可以使用事件对象的stopPropagation方法。但是注意下面的例子中如果p的click事件自身还有其他监听函数，会被正常触发。如果要彻底取消click事件，可以用\ ``stopImmediatePropagation();``

.. code:: js

   // 事件传播到 p 元素后，就不再向下传播了
   p.addEventListener('click', function (event) {
     event.stopPropagation();
   }, true);

   // 事件冒泡到 p 元素后，就不再向上冒泡了
   p.addEventListener('click', function (event) {
     event.stopPropagation();
   }, false);

10.3 Event对象
--------------

事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。

Event构造函数接受两个参数。第一个参数type是字符串，表示事件的名称；第二个参数options是一个对象，表示事件对象的配置。

.. code:: js

   event = new Event(type, options);

第二个参数主要有两个属性：

-  bubbles：布尔值，可选，默认为false，表示事件对象是否冒泡。
-  cancelable：布尔值，可选，默认为false，表示事件是否可以被取消，即能否用Event.preventDefault()取消这个事件。一旦事件被取消，就好像从来没有发生过，不会触发浏览器对该事件的默认行为。

注意，如果不是显式指定bubbles属性为true，生成的事件就只能在“捕获阶段”触发监听函数。

.. code:: js

   var ev = new Event(
     'look',
     {
       'bubbles': true,
       'cancelable': false
     }
   );
   document.dispatchEvent(ev);
