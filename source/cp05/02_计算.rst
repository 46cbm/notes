2 计算
======

2.1 创建计算字段
----------------

计算字段
~~~~~~~~

存储在数据库表中的数据一般不是应用程序所需要的格式，我们需要的是转化、计算或者格式化之后的数据。

拼接字段
~~~~~~~~

Concat()把用逗号分隔开的多个串连接成一个串。

.. code:: sql

   mysql> SELECT Concat(vend_name, '(', vend_country, ')')
       -> FROM vendors
       -> ORDER BY vend_name;
   +-------------------------------------------+
   | Concat(vend_name, '(', vend_country, ')') |
   +-------------------------------------------+
   | ACME(USA)                                 |
   | Anvils R Us(USA)                          |
   | Furball Inc.(USA)                         |
   | Jet Set(England)                          |
   | Jouets Et Ours(France)                    |
   | LT Supplies(USA)                          |
   +-------------------------------------------+
   6 rows in set (0.01 sec)

别名
~~~~

别名有时也称导出列（derived column）

.. code:: sql

   mysql> SELECT Concat(vend_name, '(', vend_country, ')') AS vend_title
       -> FROM vendors
       -> ORDER BY vend_name;
   +------------------------+
   | vend_title             |
   +------------------------+
   | ACME(USA)              |
   | Anvils R Us(USA)       |
   | Furball Inc.(USA)      |
   | Jet Set(England)       |
   | Jouets Et Ours(France) |
   | LT Supplies(USA)       |
   +------------------------+
   6 rows in set (0.00 sec)

执行算数计算
~~~~~~~~~~~~

.. code:: sql

   mysql> SELECT prod_id, quantity, item_price, quantity*item_price AS expanded_price 
       -> FROM orderitems
       -> WHERE order_num = 20005;
   +---------+----------+------------+----------------+
   | prod_id | quantity | item_price | expanded_price |
   +---------+----------+------------+----------------+
   | ANV01   |       10 |       5.99 |          59.90 |
   | ANV02   |        3 |       9.99 |          29.97 |
   | TNT2    |        5 |      10.00 |          50.00 |
   | FB      |        1 |      10.00 |          10.00 |
   +---------+----------+------------+----------------+
   4 rows in set (0.01 sec)

2.2 使用数据处理函数
--------------------

函数类型
~~~~~~~~

大多数SQL实现支持一下几种函数

-  处理文本串的函数
-  算数操作函数
-  处理日期和时间的函数
-  返回DBMS使用的特殊信息（如用户信息、版本信息）

文本处理函数
~~~~~~~~~~~~

下面是部分文本处理函数的说明

========= =================
函数      说明
========= =================
Left()    返回串左边的字符
Right()   返回串右边的字符
Locate()  找出一个串的子串
Lower()   转换为小写
Upper()   转换为大写
Soundex() 返回串的SOUNDEX值
========= =================

Soundex可以看做是按发音的近似来匹配

.. code:: sql

   mysql> SELECT cust_name, cust_contact
       -> FROM customers
       -> WHERE Soundex(cust_contact) = Soundex('Y Lie');
   +-------------+--------------+
   | cust_name   | cust_contact |
   +-------------+--------------+
   | Coyote Inc. | Y Lee        |
   +-------------+--------------+
   1 row in set (0.33 sec)

日期处理函数
~~~~~~~~~~~~

如果是比较日期，不考虑小时和分钟的话，一定要使用Data()，不然小时和分钟也会一起比较。mysql中的标准日期格式是yyyy-mm-dd。

.. code:: sql

   mysql> SELECT cust_id, order_num
       -> FROM orders
       -> WHERE Date(order_date) = '2005-09-01';
   +---------+-----------+
   | cust_id | order_num |
   +---------+-----------+
   |   10001 |     20005 |
   +---------+-----------+
   1 row in set (0.00 sec)

.. code:: sql

   mysql> SELECT cust_id, order_num 
       -> FROM orders
       -> WHERE Date(order_date) BETWEEN '2005-09-01' AND '2005-09-30';
   +---------+-----------+
   | cust_id | order_num |
   +---------+-----------+
   |   10001 |     20005 |
   |   10003 |     20006 |
   |   10004 |     20007 |
   +---------+-----------+
   3 rows in set (0.01 sec)
