10 结构和联合
=============

10.1 结构基础知识
-----------------

聚合数据类型（aggregate data
type）能同时存储多个数据。c中有两种聚合数据类型：数组和结构。

-  数组：相同元素的集合。通过下标访问
-  结构：不同元素的集合。通过成员名访问

两种常用的声明方式：

.. code:: c

   // 这种方式把tag_name和成员列表绑定在一起，但并未创建任何变量
   struct tag_name {
       int a;
       char b;
       float c;
   };

.. code:: c

   // 这种写法实际上是把name定义为这个结构的类型名
   typedef struct {
       int a;
       char b;
       float c;
   } name;

结构的自引用
''''''''''''

结构中不能直接包含自身，只能包含指向自身的指针。

.. code:: c

   // 错误的写法
   struct Node {
       int a;
       struct Node b;
   }

.. code:: c

   // 正确的写法，因为指针的长度是已知且固定的。
   struct Node {
       int a;
       struct Node *b;
   }

10.2 结构的存储分配
-------------------

我们以一个例子来说明结构的边界对齐。align占12字节，align2占8字节。因为a后面有3个空着的字节。c后面也有3个空着的字节。在align2中，b占四个字节，ac占两个字节，后面空两个字节。

offsetof宏返回成员开始存储的位置距结构起始位置偏移的字节数目。

.. code:: c

   #include<stdio.h>
   #include<stddef.h>   // offsetof 定义的文件

   struct ALIGN
   {
       char a;
       int b;
       char c;
   };

   struct ALIGN2
   {
       int b;
       char a;
       char c;
   };

   int
   main ()
   {
       struct ALIGN align;
       struct ALIGN2 align2;
       printf("sizeof(align) = %lu\n", sizeof(align));
       printf("sizeof(align2) = %lu\n", sizeof(align2));
       printf("offset of b in ALIGN = %lu\n", offsetof(struct ALIGN, b));  // 输出4
       return 0;
   }
