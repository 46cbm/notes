2 数据类型
==========

2.1 概述
--------

========= ================================================================
数据类型  说明
========= ================================================================
number    整数和小数
string    字符串
boolean   布尔类型
undefined 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值
null      表示空值，即此处的值为空
object    各种值组成的集合
========= ================================================================

es6还有一种Symbol类型。数值、字符串、布尔值这三种类型，合称为原始类型（primitive
type）的值，即它们是最基本的数据类型。对象则称为合成类型（complex
type）的值。

对象又可以分为三个子类型：

-  狭义的对象（object）
-  数组（array）
-  函数（function）

typeof运算符
~~~~~~~~~~~~

js中三种判断类型的方法如下。这里介绍typeof，其他两种方法后面介绍。

-  typeof运算符
-  instanceof运算符
-  Object.prototype.toString

一个未定义的变量如果直接使用会报错，但是如果用typeof运算符，则会返回“undefined”。这个特性可以用作判断的条件

.. code:: js

   f
   // VM2124:1 Uncaught ReferenceError: f is not defined
   //     at <anonymous>:1:1
   // (anonymous) @ VM2124:1

   typeof f
   // "undefined"

   typeof f === "undefined"
   // true

数组其实是一种特殊的对象
''''''''''''''''''''''''

.. code:: js

   typeof []
   //"object"

   typeof {}
   //"object"

要区别数组和对象可以使用instanceof
''''''''''''''''''''''''''''''''''

.. code:: js

   var b = {};
   b instanceof Array
   //false

   var a = [];
   a instanceof Array
   //true

typeof null 结果是object
''''''''''''''''''''''''

这是历史原因造成的。早期null是一种特殊的object。后来null独立出来，但是为了兼容之前的代码，所以这里的结果还是object。

.. code:: js

   typeof null
   //"object"

2.2 null, undefined 和布尔值
----------------------------

null和undefined
~~~~~~~~~~~~~~~

在if中null和undefine都会被转为false。二者==比较是一样的===比较则不一样。（“==”表示只要值相等即可为真，而“===”则要求不仅值相等，而且也要求类型相同）

布尔值
~~~~~~

下面六个值在自动转化时会转换为false，其他都是true

-  undefined
-  null
-  false
-  0
-  NaN
-  "" or ’’

注意空对象和空数组会转化为true

.. code:: js

   if ([]) {console.log('true')};
   // true

   if ({}) {console.log('true')};
   // true

2.3 数值
--------

.. _概述-1:

概述
~~~~

整数和浮点数
''''''''''''

js内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是同一个数。

.. code:: js

   1 === 1.0
   // true

但是某些运算只有整数才能完成，此时 JavaScript
会自动把64位浮点数，转成32位整数，然后再进行运算（比如说位运算）

.. code:: js

   1.0 << 2    // 1.0也会被转化为整数，1其实就是1.0
   // 4
   1 << 2
   // 4

注意浮点数都不是精确是，所以在进行小数的比较运算时要小心

.. code:: js

   (0.3 - 0.2) === (0.2 - 0.1)
   // false

   0.3 / 0.1
   // 2.9999999999999996

数值的范围
''''''''''

根据IEEE754标准，JavaScript
能够表示的数值范围为2\ :sup:`1024`\ 到2\ :sup:`-1023`\ （开区间），超出这个范围的数无法表示。

如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript
无法表示这么大的数，这时就会返回Infinity。

如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即
JavaScript 无法表示这么小的数，这时会直接返回0。

.. code:: js

   Math.pow(2,1024)
   // Infinity

   Math.pow(2,-1075)
   // 0

JavaScript
提供Number对象的MAX_VALUE和MIN_VALUE属性，返回可以表示的具体的最大值和最小值。

.. code:: js

   Number.MAX_VALUE
   // 1.7976931348623157e+308

   Number.MIN_VALUE
   // 5e-324

数值的表示
~~~~~~~~~~

-  十进制：没有前导0的数值。
-  八进制：有前缀0o或0O的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。
-  十六进制：有前缀0x或0X的数值。
-  二进制：有前缀0b或0B的数值。

特殊数值
~~~~~~~~

NaN
'''

表示“非数字”（Not a
Number），主要出现在将字符串解析成数字出错的场合。0除0也是NaN。

.. code:: js

   0/0
   // NaN

另外，NaN不是独立的类型，只是一个特殊的数值，其还是属于Number

.. code:: js

   typeof NaN
   // "number"

NaN与任何数运算结果是NaN，且NaN还不等于自身。

.. code:: js

   NaN + 1
   // NaN

   NaN === NaN
   // false

Infinity
''''''''

Infinity与NaN比较，总是返回false。Infinity的四则运算，符合无穷的数学计算规则。

.. code:: js

   Infinity * 5
   // Infinity

   5 / Infinity
   // 0

   5 - Infinity
   // -Infinity

与数值相关的全局方法
~~~~~~~~~~~~~~~~~~~~

parseInt()
''''''''''

基本用法是把字符串转化为整数。它会一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。不能转化，则返回NaN。

.. code:: js

   parseInt('+1dwdwd')
   // 1

   parseInt('efe')
   // NaN

parseInt还可以接受第二个参数，进行机制转换。第二个参数是当前的进制，在2-36之间。

.. code:: js

   parseInt(1000, 2)
   8
   parseInt(1000, 8)
   512
   parseInt(1000, 10)
   1000

parseFloat()
''''''''''''

基本用法是把字符串转化为浮点数。

isNaN()
'''''''

判断是非为NaN。其实有个更好的方法，因为只有NaN不和自身相等

.. code:: js

   function myIsNaN(value) {
     return value !== value;
   }

isFinite()
''''''''''

Infinity、NaN、undefined返回false，其他的数值返回true。

   注意null也返回true

2.4 字符串
----------

\\
~~

\\除了转义之外，还有三种特殊用法。

-  \\HHH：HHH是三个八进制数（从000到377，即二进制0到255），代表一个字符
-  \\xHH：HH是两个十六进制数（这样也只能表示从0到255的数），代表一个字符
-  \\uHHHH：HHHH是四个十六进制数，代表一个字符

字符集
~~~~~~

js内部使用unicode字符集。js内部都是用的2个字节（16位）来存放一个字符。但是现在unicode有些字符要4个字节才能存放。比如字\ ``'𝌆'``\ ，js是以两个字节的标准来分判断字符的，所以长度会返回2。

.. code:: js

   '𝌆'.length
   // 2

base64编码
~~~~~~~~~~

base64编码的目的不是为了加密，而是为了不出现特殊字符，简化程序的处理。比如ascii的0到31个字符是无法打印出来的，用base64就可以把它们转化为可打印的字符。

base64编码由0-9, A-Z, a-z和+和/这64个字符构成。js原生提供两个函数

-  btoa()：任意值转换为base64编码
-  atob()：base64编码转换为原来的值

但是注意非ascii字符不能直接用这两个方法。需要用\ ``encodeURIComponent``\ 和\ ``decodeURIComponent``\ 转化一下。

2.5 对象
--------

.. _概述-2:

概述
~~~~

js中的对象就是一组无序的键值对集合。对象的所有键名都是字符串（ES6
又引入了 Symbol
值也可以作为键名），所以加不加引号都可以。如果键名是数值，会被自动转为字符串。

属性的值如果是函数，属性又称为方法。

.. code:: js

   var obj = {
     p: function (x) {
       return 2 * x;
     }
   };

   obj.p(1) // 2

属性可以动态创建，不必在对象声明时就指定。

.. code:: js

   var obj = {};
   obj.foo = 123;
   obj.foo // 123

对象的引用
''''''''''

如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。

.. code:: js

   var o1 = {};
   var o2 = o1;

   o1.a = 1;
   o2.a // 1

   o2.b = 2;
   o1.b // 2

但是这种引用只局限于对象，如果是一个原始类型的值，则会拷贝（这里不同于python中的一切皆对象）

.. code:: js

   var x = 1;
   var y = x;

   x = 2;
   y // 1

代码块和对象
''''''''''''

js引擎遇到大括号一律解释为代码块，如果要显示的让js引擎解释为对象，需要再加一个圆括号。eval的作用是对字符串求值

.. code:: js

   eval('{foo:123}')
   // 123，这里被理解成了代码块，里面的值就是123

   eval('({foo:123})')
   // {foo: 123}

属性的操作
~~~~~~~~~~

属性的读取 . []
'''''''''''''''

有.好和方括号两种方式。但是注意如果键是数字，则只能用方括号取值。

.. code:: js

   var obj = {
     123: 'hello world'
   };

   obj[123] // "hello world"
   obj.123 // 报错

属性的赋值 . []
'''''''''''''''

同样有.号和方括号两种方式。js允许属性的“后绑定”，也就是说，你可以在任意时刻新增属性，没必要在定义对象的时候，就定义好属性。

属性的查看 ``Objects.keys()``
'''''''''''''''''''''''''''''

查看一个对象的所有属性，可以用\ ``Objects.keys()``

.. code:: js

   var obj = {
     key1: 1,
     key2: 2
   };

   Object.keys(obj);
   // ['key1', 'key2']

属性删除 ``delete``
'''''''''''''''''''

使用delete命令删除属性，成功返回true

.. code:: js

   var obj = { p: 1 };
   Object.keys(obj) // ["p"]

   delete obj.p // true
   obj.p // undefined
   Object.keys(obj) // []

注意，删除一个不存在的属性，delete不报错，而且返回true。只有一种情况，delete命令会返回false，那就是该属性存在，且不得删除。

属性是否存在 ``in``
'''''''''''''''''''

.. code:: js

   var obj = { p: 1 };
   'p' in obj // true
   'toString' in obj // true，toString是继承的属性

如果要判断是否为对象自身的属性，可以使用\ ``hasOwnProperty``

.. code:: js

   var obj
   obj.hasOwnProperty('toString')
   // false

属性的遍历 ``for ... in ...``
'''''''''''''''''''''''''''''

-  它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。
-  它不仅遍历对象自身的属性，还遍历继承的属性。

.. code:: js

   var obj = {a: 1, b: 2, c: 3};

   for (var i in obj) {
     console.log('key = ' + i + ', value = ' + obj[i]);
   }
   // key = a, value = 1
   // key = b, value = 2
   // key = c, value = 3
   // toString是继承的属性，但是也是不可比案例的属性，所以这里没有输出

如果要遍历对象自身非继承的属性，可以配合\ ``hasOwnProperty``\ 使用。

.. code:: js

   var person = { name: 'leo' };

   for (var key in person) {
     if (person.hasOwnProperty(key)) {
       console.log(key);
     }
   }

   // name

with语句
~~~~~~~~

基本作用是方便操作一个对象的多个属性。

.. code:: js

   var obj = {
     p1: 1,
     p2: 2,
   };
   with (obj) {
     p1 = 4;
     p2 = 5;
   }
   // 等同于
   obj.p1 = 4;
   obj.p2 = 5;

注意，如果with区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。

.. code:: js

   var obj = {};
   with (obj) {
     p1 = 4;
     p2 = 5;
   }

   obj.p1 // undefined
   p1 // 4

这是因为with区块没有改变作用域，它的内部依然是当前作用域。这造成了with语句的一个很大的弊病，就是绑定对象不明确。所以建议不适用with，如果对象操作不方便，可以使用一个临时变量

.. code:: js

   with(obj1.obj2.obj3) {
     console.log(p1 + p2);
   }

   // 可以写成
   var temp = obj1.obj2.obj3;
   console.log(temp.p1 + temp.p2);

2.6 函数
--------

.. _概述-3:

概述
~~~~

函数的三种声明
''''''''''''''

-  function命令
-  函数表达式
-  Function构造函数

.. code:: js

   // 1 function 命令
   function print(s) {
     console.log(s);
   }

   // 2 函数表达式，注意表达式结尾有分号
   var print = function(s) {
     console.log(s);
   };

   // 3 Function 构造函数
   var add = new Function(
     'x',
     'y',
     'return x + y'
   );

   // 等同于
   function add(x, y) {
     return x + y;
   }

可以传递任意数量的参数给Function构造函数，只有最后一个参数会被当做函数体，如果只有一个参数，该参数就是函数体。

第一等公民
''''''''''

JavaScript
语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。函数只是一个可以执行的值，此外并无特殊之处。由于函数与其他数据类型地位平等，所以在
JavaScript 语言中又称函数为第一等公民。

函数的属性和方法
~~~~~~~~~~~~~~~~

name属性
''''''''

name属性的一个用处，就是获取参数函数的名字。

.. code:: js

   var func123 = function () {};

   function test(f) {
     console.log(f.name);
   }

   test(func123) // func123

length属性
''''''''''

函数的length属性返回函数预期传入的参数个数，即函数定义之中的参数个数。

.. code:: js

   function f(a, b, c, d, e) {}
   f.length // 5

toString()
''''''''''

函数的toString方法返回一个字符串，内容是函数的源码。

.. code:: js

   f.toString()
   // "function f(a, b, c, d, e) {}"

但是对于原生函数，toString()方法返回function (){[native code]}。

.. code:: js

   Math.sqrt.toString()
   // "function sqrt() { [native code] }"

函数的作用域
~~~~~~~~~~~~

在 ES5 的规范中，JavaScript
只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6
又新增了块级作用域。

与全局作用域一样，函数作用域内部也会产生“变量提升”现象。

函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。

.. code:: js

   var x = function () {
     console.log(a);
   };

   function y(f) {
     var a = 2;
     f();       // 这里调用x，但是x中用的是定义时的作用域，那里面没有a
   }

   y(x)
   // Uncaught ReferenceError: a is not defined

函数的参数
~~~~~~~~~~

js中如果函数不传参数，则定义中的参数会是undefined。如果函数有多个参数，而我们只想给后面的参数传值，需要显式的给前面的参数传一个undefined值。

.. code:: js

   function f(a, b) {
     return a;
   }
   f(undefined, 1) // undefined

-  按值传参：函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递。
-  引用传参：如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递。

如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。

.. code:: js

   var obj = [1, 2, 3];
   var obj2 = [1, 2, 3];

   function f(o) {
     o = [2, 3, 4];    // 替换掉整个参数，这时不会影响到原始值。
   }

   function f2(o) {
     o[0] = 100;     // 传的是引用，所以会修改到外面的obj2
   }

   f(obj);
   f2(obj2);

   obj // [1, 2, 3]
   obj2 // [100, 2, 3]

arguments对象
~~~~~~~~~~~~~

由于 JavaScript
允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。

.. code:: js

   var f = function (one) {
     console.log(arguments[0]);
     console.log(arguments[1]);
     console.log(arguments[2]);
   }

   f(1, 2, 3)
   // 1
   // 2
   // 3

虽然arguments很像数组，但它是一个对象。数组专有的方法（比如slice和forEach），不能在arguments对象上直接使用。如果要像数组一样使用，必须先转化为数组。

闭包
~~~~

要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。

.. code:: js

   function f1() {
     var n = 999;
     function f2() {
       console.log(n);
     }
     return f2;
   }

   var result = f1();
   result(); // 999

因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如f2记住了它诞生的环境f1，所以从f2可以得到f1的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。

闭包的最大用处:

-  读取函数内部的变量，
-  让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。
-  封装对象的私有属性和私有方法

.. code:: js

   function createIncrementor(start) {
     return function () {
       return start++;
     };
   }

   var inc = createIncrementor(5);

   inc() // 5
   inc() // 6
   inc() // 7

inc始终在内存中，而inc的存在依赖于createIncrementor，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。

再来看一个封装私有成员的例子

.. code:: js

   function Person(name) {
     var _age;
     function setAge(n) {
       _age = n;
     }
     function getAge() {
       return _age;
     }

     return {
       name: name,
       getAge: getAge,
       setAge: setAge
     };
   }

   var p1 = Person('张三');
   p1.setAge(25);
   p1.getAge() // 25
