2 数据类型
==========

2.1 概述
--------

========= ================================================================
数据类型  说明
========= ================================================================
number    整数和小数
string    字符串
boolean   布尔类型
undefined 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值
null      表示空值，即此处的值为空
object    各种值组成的集合
========= ================================================================

es6还有一种Symbol类型。数值、字符串、布尔值这三种类型，合称为原始类型（primitive
type）的值，即它们是最基本的数据类型。对象则称为合成类型（complex
type）的值。

对象又可以分为三个子类型：

-  狭义的对象（object）
-  数组（array）
-  函数（function）

typeof运算符
~~~~~~~~~~~~

js中三种判断类型的方法如下。这里介绍typeof，其他两种方法后面介绍。

-  typeof运算符
-  instanceof运算符
-  Object.prototype.toString

一个未定义的变量如果直接使用会报错，但是如果用typeof运算符，则会返回“undefined”。这个特性可以用作判断的条件

.. code:: js

   f
   // VM2124:1 Uncaught ReferenceError: f is not defined
   //     at <anonymous>:1:1
   // (anonymous) @ VM2124:1

   typeof f
   // "undefined"

   typeof f === "undefined"
   // true

数组其实是一种特殊的对象
''''''''''''''''''''''''

.. code:: js

   typeof []
   //"object"

   typeof {}
   //"object"

要区别数组和对象可以使用instanceof
''''''''''''''''''''''''''''''''''

.. code:: js

   var b = {};
   b instanceof Array
   //false

   var a = [];
   a instanceof Array
   //true

typeof null 结果是object
''''''''''''''''''''''''

这是历史原因造成的。早期null是一种特殊的object。后来null独立出来，但是为了兼容之前的代码，所以这里的结果还是object。

.. code:: js

   typeof null
   //"object"

2.2 null, undefined 和布尔值
----------------------------

null和undefined
~~~~~~~~~~~~~~~

在if中null和undefine都会被转为false。二者==比较是一样的===比较则不一样。（“==”表示只要值相等即可为真，而“===”则要求不仅值相等，而且也要求类型相同）

布尔值
~~~~~~

下面六个值在自动转化时会转换为false，其他都是true

-  undefined
-  null
-  false
-  0
-  NaN
-  "" or ’’

注意空对象和空数组会转化为true

.. code:: js

   if ([]) {console.log('true')};
   // true

   if ({}) {console.log('true')};
   // true

2.3 数值
--------

.. _概述-1:

概述
~~~~

整数和浮点数
''''''''''''

js内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，1与1.0是同一个数。

.. code:: js

   1 === 1.0
   // true

但是某些运算只有整数才能完成，此时 JavaScript
会自动把64位浮点数，转成32位整数，然后再进行运算（比如说位运算）

.. code:: js

   1.0 << 2    // 1.0也会被转化为整数，1其实就是1.0
   // 4
   1 << 2
   // 4

注意浮点数都不是精确是，所以在进行小数的比较运算时要小心

.. code:: js

   (0.3 - 0.2) === (0.2 - 0.1)
   // false

   0.3 / 0.1
   // 2.9999999999999996

数值的范围
''''''''''

根据IEEE754标准，JavaScript
能够表示的数值范围为2\ :sup:`1024`\ 到2\ :sup:`-1023`\ （开区间），超出这个范围的数无法表示。

如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript
无法表示这么大的数，这时就会返回Infinity。

如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即
JavaScript 无法表示这么小的数，这时会直接返回0。

.. code:: js

   Math.pow(2,1024)
   // Infinity

   Math.pow(2,-1075)
   // 0

JavaScript
提供Number对象的MAX_VALUE和MIN_VALUE属性，返回可以表示的具体的最大值和最小值。

.. code:: js

   Number.MAX_VALUE
   // 1.7976931348623157e+308

   Number.MIN_VALUE
   // 5e-324

数值的表示
~~~~~~~~~~

-  十进制：没有前导0的数值。
-  八进制：有前缀0o或0O的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。
-  十六进制：有前缀0x或0X的数值。
-  二进制：有前缀0b或0B的数值。

特殊数值
~~~~~~~~

NaN
'''

表示“非数字”（Not a
Number），主要出现在将字符串解析成数字出错的场合。0除0也是NaN。

.. code:: js

   0/0
   // NaN

另外，NaN不是独立的类型，只是一个特殊的数值，其还是属于Number

.. code:: js

   typeof NaN
   // "number"

NaN与任何数运算结果是NaN，且NaN还不等于自身。

.. code:: js

   NaN + 1
   // NaN

   NaN === NaN
   // false

Infinity
''''''''

Infinity与NaN比较，总是返回false。Infinity的四则运算，符合无穷的数学计算规则。

.. code:: js

   Infinity * 5
   // Infinity

   5 / Infinity
   // 0

   5 - Infinity
   // -Infinity

与数值相关的全局方法
~~~~~~~~~~~~~~~~~~~~

parseInt()
''''''''''

基本用法是把字符串转化为整数。它会一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。不能转化，则返回NaN。

.. code:: js

   parseInt('+1dwdwd')
   // 1

   parseInt('efe')
   // NaN

parseInt还可以接受第二个参数，进行机制转换。第二个参数是当前的进制，在2-36之间。

.. code:: js

   parseInt(1000, 2)
   8
   parseInt(1000, 8)
   512
   parseInt(1000, 10)
   1000

parseFloat()
''''''''''''

基本用法是把字符串转化为浮点数。

isNaN()
'''''''

判断是非为NaN。其实有个更好的方法，因为只有NaN不和自身相等

.. code:: js

   function myIsNaN(value) {
     return value !== value;
   }

isFinite()
''''''''''

Infinity、NaN、undefined返回false，其他的数值返回true。

   注意null也返回true

2.4 字符串
----------

\\
~~

\\除了转义之外，还有三种特殊用法。

-  \\HHH：HHH是三个八进制数（从000到377，即二进制0到255），代表一个字符
-  \\xHH：HH是两个十六进制数（这样也只能表示从0到255的数），代表一个字符
-  \\uHHHH：HHHH是四个十六进制数，代表一个字符

字符集
~~~~~~

js内部使用unicode字符集。js内部都是用的2个字节（16位）来存放一个字符。但是现在unicode有些字符要4个字节才能存放。比如字\ ``'𝌆'``\ ，js是以两个字节的标准来分判断字符的，所以长度会返回2。

.. code:: js

   '𝌆'.length
   // 2

base64编码
~~~~~~~~~~

base64编码的目的不是为了加密，而是为了不出现特殊字符，简化程序的处理。比如ascii的0到31个字符是无法打印出来的，用base64就可以把它们转化为可打印的字符。

base64编码由0-9, A-Z, a-z和+和/这64个字符构成。js原生提供两个函数

-  btoa()：任意值转换为base64编码
-  atob()：base64编码转换为原来的值

但是注意非ascii字符不能直接用这两个方法。需要用\ ``encodeURIComponent``\ 和\ ``decodeURIComponent``\ 转化一下。
