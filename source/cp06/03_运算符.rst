3 运算符
========

3.1 算数运算符
--------------

加法运算符的重载
~~~~~~~~~~~~~~~~

当操作数是字符或能转换成字符时，加法运算符会重载为字符串的拼接。而减法、乘法、除法则没有这个重载。

对象相加
~~~~~~~~

如果对象作为加法的操作数，会先调用\ ``valueOf()``\ 再调用\ ``toString()``\ ，即\ ``obj.valueOf().toString()``\ 。\ ``valueOf()``\ 一般返回对象自身。

.. code:: js

   var obj = { p: 1}  // 实际上obj.valueOf().toString()就是[object Object]

   obj+1
   // "[object Object]1"

我们可以自定义\ ``valueOf()``\ 或\ ``toString()``\ 来改变对象加法的结果。

.. code:: js

   var obj = {
     valueOf: function () {
       return 1;
     }
   };

   obj + 2 // 3

.. code:: js

   var obj = {
     toString: function () {
       return 'hello';
     }
   };

   obj + 2 // "hello2"

求余运算符
~~~~~~~~~~

js中求余运算符结果的正负号由第一个操作数的正负号决定

数值运算符、负数值运算符
~~~~~~~~~~~~~~~~~~~~~~~~

数值运算符的作用在于可以将任何值转为数值（与Number函数的作用相同）。负数值运算符（-），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。

.. code:: js

   +true // 1
   +[] // 0
   +{} // NaN

指数运算符
~~~~~~~~~~

指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。

.. code:: js

   // 相当于 2 ** (3 ** 2)
   2 ** 3 ** 2
   // 512

3.2 比较运算符
--------------

这里需要注意与NaN的比较。任何值（包括NaN本身）与NaN比较，返回的都是false。

.. code:: js

   1 > NaN // false
   1 <= NaN // false
   '1' > NaN // false
   '1' <= NaN // false
   NaN > NaN // false
   NaN <= NaN // false

如果比较对象，同算数运算符一样，也会先\ ``obj.valueOf().toString()``\ 再进行比较。

严格相等
~~~~~~~~

严格相等与相等区别是：相等运算符（==）比较两个值是否相等，严格相等运算符（===）比较它们是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，再用严格相等运算符进行比较。

对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。下面三个比较，前两个比较的是值，最后一个比较的是地址，所以都返回false。

.. code:: js

   var obj1 = {};
   var obj2 = {};

   obj1 > obj2 // false
   obj1 < obj2 // false
   obj1 === obj2 // false

undefined和null与自身严格相等。

.. code:: js

   undefined === undefined // true
   null === null // true

3.3 二进制位运算符
------------------

位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。在
JavaScript
内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。

所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。使用二进制否运算取整，是所有取整方法中最快的一种。

.. code:: js

   ~~2.9 // 2
   ~~47.11 // 47
   ~~1.9999 // 1
   ~~3 // 3

对字符串进行二进制否运算，JavaScript
引擎会先调用Number函数，将字符串转为数值。

右移运算符与头部补零的右移运算符
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

js中右移运算符（>>）如果是正数，头部全部补0；如果是负数，头部全部补1。即执行的是算术位移。如果要在头部补0，使用头部补零的右移运算符（>>>）

3.3 其他运算符，运算顺序
------------------------
